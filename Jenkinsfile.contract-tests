#!/usr/bin/env groovy

/*
 * Copyright (C) 2019 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

library "canvas-builds-library@${env.CANVAS_BUILDS_REFSPEC}"

def cleanupFn(status) {
  junit 'tmp/spec_results/**/*.xml'

  if (status == 'SUCCESS' && configuration.isChangeMerged()) {
    sh 'build/new-jenkins/pact/contracts-publish-api.sh'
  }
}

def runAndCopyResults(databaseName, consumerName, scriptName='build/new-jenkins/pact/contracts-verify-api.sh') {
  withEnv([
    "DATABASE_NAME=${databaseName}",
    "PACT_API_CONSUMER=${consumerName}",
  ]) {
    try {
      sh scriptName
    } finally {
      sh "build/new-jenkins/docker-copy-files.sh /usr/src/app/log/results/ tmp/spec_results/${DATABASE_NAME} ${DATABASE_NAME} --allow-error --clean-dir"
    }
  }
}

pipeline {
  agent none
  options {
    ansiColor('xterm')
    timeout(15)
    timestamps()
  }

  environment {
    BUILD_REGISTRY_FQDN = configuration.buildRegistryFQDN()
    COMPOSE_FILE = 'docker-compose.new-jenkins.yml:docker-compose.new-jenkins-contract-tests.yml'
    POSTGRES_PASSWORD = 'sekret'
    PACT_BROKER = credentials('PACT_BROKER')
    PACT_BROKER_USERNAME = "${env.PACT_BROKER_USR}"
    PACT_BROKER_PASSWORD = "${env.PACT_BROKER_PSW}"
    RSPEC_PROCESSES = '7'
  }

  stages {
    stage('Environment') {
      steps {
        script {
          extendedStage('Runner').nodeRequirements(label: 'canvas-docker', podTemplate: libraryResource('/pod_templates/docker_base.yml'), container: 'docker').obeysAllowStages(false).execute {
            stage('Start Docker Images') {
              timeout(3) {
                def refspecToCheckout = env.GERRIT_PROJECT == 'canvas-lms' ? env.JENKINSFILE_REFSPEC : env.CANVAS_LMS_REFSPEC

                checkoutRepo('canvas-lms', refspecToCheckout, 1)

                credentials.withStarlordDockerLogin { ->
                  sh(script: 'build/new-jenkins/docker-compose-pull.sh', label: 'Pull Images')
                }
                sh 'build/new-jenkins/pact/docker-compose-pact-setup.sh'
              }
            }

            def postBuildHandler = [
              onStageEnded: { stageName, stageConfig ->
                cleanupFn(stageConfig.status())
              }
            ]

            extendedStage('Provider Verification for API and Live Event Consumers').hooks(postBuildHandler).obeysAllowStages(false).execute {
              def stages = [:]

              stages['Android'] = {
                timeout(5) {
                  runAndCopyResults('pact_test1', 'android')
                }
              }

              stages['Canvas iOS'] = {
                timeout(5) {
                  runAndCopyResults('pact_test2', 'canvas-ios')
                }
              }

              stages['Quiz LTI'] = {
                timeout(10) {
                  runAndCopyResults('pact_test3', 'Quiz LTI')
                }
              }

              stages['Sistemic'] = {
                timeout(5) {
                  runAndCopyResults('pact_test4', 'Sistemic')
                }
              }

              stages['Live Events'] = {
                timeout(5) {
                  runAndCopyResults('live_events', '', 'build/new-jenkins/pact/contracts-verify-live-events.sh')
                }
              }

              stages['Outcomes'] = {
                timeout(5) {
                  runAndCopyResults('pact_test6', '', 'build/new-jenkins/pact/contracts-generate-api.sh')
                }
              }

              parallel(stages)
            }
          }
        }
      }
    }
  }
}
